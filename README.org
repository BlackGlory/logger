* Logger
一个受[[https://github.com/BlackGlory/pubsub][PubSub]]启发的Web友好的自托管ad-hoc微服务,
提供基于 HTTP 和 SSE 的日志功能,
带有基于token和名单的访问控制策略,
支持JSON Schema.

日志的写入性能受到所使用的数据库的限制.

所有URL都采用了反射性的CORS, 不提供针对 =Origin= 的访问控制策略.

** Quickstart
- sse-cat: https://github.com/BlackGlory/sse-cat
- websocat: https://github.com/vi/websocat

#+BEGIN_SRC sh
# 运行
docker run --detach --publish 8080:8080 blackglory/logger

# 打开第一个终端
sse-cat http://localhost:8080/logger/hello-world

# 打开第二个终端
websocat ws://localhost:8080/logger/hello-world

# 打开第三个终端
curl http://localhost:8080/logger/hello-world --data 'hello'
#+END_SRC

** Install
*** 从源代码运行
可以使用环境变量 =LOGGER_HOST= 和 =LOGGER_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/logger
cd log
yarn install
yarn build
yarn --silent start
#+END_SRC

*** Docker
#+BEGIN_SRC sh
docker run \
  --detach \
  --publish 8080:8080 \
  blackglory/logger
#+END_SRC

**** 从源代码构建
#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/logger
cd logger
yarn install
yarn docker:build
#+END_SRC

**** Recipes
***** 公开服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  logger:
    image: 'blackglory/logger'
    restart: always
    volumes:
      - 'logger-data:/data'
    ports:
      - '8080:8080'

volumes:
  logger-data:
#+END_SRC

***** 私人服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  logger:
    image: 'blackglory/logger'
    restart: always
    environment:
      - LOGGER_ADMIN_PASSWORD=password
      - LOGGER_TOKEN_BASED_ACCESS_CONTROL=true
      - LOGGER_WRITE_TOKEN_REQUIRED=true
      - LOGGER_READ_TOKEN_REQUIRED=true
      - LOGGER_DELETE_TOKEN_REQUIRED=true
    volumes:
      - 'logger-data:/data'
    ports:
      - '8080:8080'

volumes:
  logger-data:
#+END_SRC

** API
所有API中的记录器namespace都需要满足此正则表达式: =^[a-zA-Z0-9\.\-_]{0,255}$=

API中的日志id格式为 =Unix毫秒时间戳-从0开始的计数器=,
使用计数器是为了防止在同一毫秒添加多条日志出现重复.
由于日志有可能被删除, 因此不应假设计数器的数字是连续的.

*** Public
**** write
=POST /logger/<namespace>=

往特定记录器记录日志, 所有订阅此记录器的客户端都会收到日志.
namespace用于标识记录器.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有write权限的token:
=POST /logger/<namespace>?token=<token>=

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --data 'message' \
  "http://localhost:8080/logger/$namespace"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/logger/${namespace}`, {
  method: 'POST'
, body: 'message'
})
#+END_SRC

**** follow via Server-Sent Events(SSE)
=GET /logger/<namespace>=
=GET /logger/<namespace>?since=<logId>=

从特定记录器跟随日志.
namespace用于标识记录器.
可用 =since=<logId>= 一并接收特定日志(logId)之后的日志,
若在接收完日志前就有新的日志被写入, 则可能在接收的途中收到新日志.

接收到的日志格式如下:
#+BEGIN_SRC ts
{
  id: string
  payload: string
}
#+END_SRC

SSE的 =Last-Event-Id= 请求头(值等同于logId)可用于断开后的重新连接(在浏览器里会自动重连),
Logger将发送自Last-Event-Id之后的所有日志.
需要注意的是, 如果Logger从未发回过日志, 则客户端将无法获得Last-Event-Id, 因此会错过重新连接之前的日志.
如果同时存在 =since= 和 =Last-Event-Id=, 会优先使用 =Last-Event-Id=.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有read权限的token:
=/logger/<namespace>?token=<token>=

***** heartbeat
通过环境变量 =LOGGER_SSE_HEARTBEAT_INTERVAL= 可以设置SSE心跳包的发送间隔, 单位为毫秒.
在默认情况下, 服务不会发送SSE心跳包,
半开连接的检测依赖于服务端和客户端的运行平台的TCP Keepalive配置.

当 =LOGGER_SSE_HEARTBEAT_INTERVAL= 大于零时,
服务会通过SSE的heartbeat事件按指定间隔发送空白数据.
客户端若要实现半开连接检测, 则需要自行根据heartbeat事件设定计时器, 以判断连接是否正常.

***** Example
****** sse-cat
#+BEGIN_SRC sh
sse-cat "http://localhost:8080/logger/$namespace"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
const es = new EventSource(`http://localhost:8080/logger/${namespace}`)
es.addEventListener('message', event => {
  console.log(event.data)
})
#+END_SRC

**** follow via WebSocket
=WS /logger/<namespace>=
=WS /logger/<namespace>?since=<logId>=

从特定记录器跟随日志.
namespace用于标识记录器.
可用 =since=<logId>= 一并接收特定日志(logId)之后的日志,
若在接收完日志前就有新的日志被写入, 则可能在接收的途中收到新日志.

接收到的日志格式如下:
#+BEGIN_SRC ts
{
  id: string
  payload: string
}
#+END_SRC

如果开启基于token的访问控制, 则可能需要在Querystring提供具有read权限的token:
=/logger/<namespace>?token=<token>=

***** heartbeat
通过环境变量  =LOGGER_WS_HEARTBEAT_INTERVAL= 可以设置WS心跳包(ping帧)的发送间隔, 单位为毫秒.
在默认情况下, 服务不会发送心跳包,
半开连接的检测依赖于服务端和客户端的运行平台的TCP Keepalive配置.

当 =LOGGER_WS_HEARTBEAT_INTERVAL= 大于零时,
服务会通过WS的ping帧按间隔发送心跳包.

客户端若要实现半开连接检测, 可以定期发送空白字符串到服务端, 以判断连接是否正常.
为防止带宽滥用, 如果客户端发送的不是空白字符串, 则服务端会主动关闭连接.

***** Example
****** websocat
#+BEGIN_SRC sh
websocat "ws://localhost:8080/logger/$namespace"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
const ws = new WebSocket(`ws://localhost:8080/logger/${namespace}`)
ws.addEventListener('message', event => {
    console.log(event.data);
})
#+END_SRC

**** query
=GET /logger/<namespace>/logs=

获取所有日志.
查询(head, tail, from, to可以组合使用, 不能同时有head和tail)
- =GET /logger/<namespace>/logs?head=<number>= 取开头number个记录.
- =GET /logger/<namespace>/logs?tail=<number>= 取结尾number个记录.
- =GET /logger/<namespace>/logs?from=<logId>= 从特定logId开始.
- =GET /logger/<namespace>/logs?to=<logId>= 至特定logId结束.

from和to操作符可以使用实际并不存在的logId, 程序会自动匹配至最近的记录.
省略from相当于从最早的记录开始.
省略to相当于至最晚的记录结束.

返回结果为JSON数组:
#+BEGIN_SRC ts
Array<{
  id: string
  payload: string
}>
#+END_SRC

如果开启基于token的访问控制, 则可能需要在Querystring提供具有read权限的token:
=/logger/<namespace>/logs?token=<token>=

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/logger/$namespace/logs"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/logger/${namespace}/logs`).then(res => res.json())
#+END_SRC

**** delete
=DELETE /logger/<namespace>/logs?from=<logId>= 删除从特定logId开始.
- =DELETE /logger/<namespace>/logs?to=<logId>= 删除至特定logId结束.
- =DELETE /logger/<namespace>/logs?head=<number>= 删除开头number个记录.
- =DELETE /logger/<namespace>/logs?tail=<number>= 删除结尾number个记录.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有delete权限的token:
=/logger/<namespace>/logs?token=<token>=

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/logger/$namespace/logs"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/logger/${namespace}/logs`)
#+END_SRC

**** get all namespaces
=GET /logger=

列出所有的namespace.
输出JSON =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

*****  Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/logger'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/logger').then(res => res.json())
#+END_SRC

*** Private
**** JSON Schema验证
通过设置环境变量 =LOGGER_JSON_VALIDATION=true= 可开启write的JSON Schema验证功能.
任何带有 =Content-Type: application/json= 的请求都会被验证,
即使没有设置JSON Schema, 也会拒绝不合法的JSON文本.
JSON验证仅用于验证, 不会重新序列化消息, 因此follow得到的payload会与write发送的消息相同.

在开启验证功能的情况下, 通过环境变量 =LOGGER_DEFAULT_JSON_SCHEMA= 可设置默认的JSON Schema,
该验证仅对带有 =Content-Type: application/json= 的请求有效.

通过设置环境变量 =LOGGER_JSON_PAYLOAD_ONLY=true=,
可以强制write只接受带有 =Content-Type: application/json= 的请求.
此设置在未开启JSON Schema验证的情况下也有效, 但在这种情况下服务器能够接受不合法的JSON.

***** 为记录器单独设置JSON Schema
可单独为namespace设置JSON Schema,
被设置的namespace将仅接受 =Content-Type: application/json= 请求.

****** 获取所有具有JSON Schema的记录器namespace
=GET /admin/logger-with-json-schema=

获取所有具有JSON Schema的记录器namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger-with-json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/logger-with-json-schema', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取JSON Schema
=GET /admin/logger/<namespace>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/json-schema`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置JSON Schema
=PUT /admin/logger/<namespace>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$JSON_SCHEMA" \
  "http://localhost:8080/admin/logger/$namespace/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/json-schema`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
    'Content-Type': 'application/json'
  }
, body: JSON.stringify(jsonSchema)
})
#+END_SRC

****** 移除JSON Schema
=DELETE /admin/logger/<namespace>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/json-schema"
#+END_SRC
j
******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/json-schema`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

**** 日志清除策略(purge policies)
Logger同时实施两种日志清除策略:
- 基于生存时间(TTL, time-to-live)的清除策略, 如果日志过期, 则删除日志
- 基于数量限制(limit)的清除策略, 如果单个记录器的日志数量达到上限, 则删除旧日志

日志清除策略只会在写入新日志时得到执行,
因此当你查询日志时, 可能会得到已经过期的日志.

可用环境变量 =LOGGER_LOGS_TIME_TO_LIVE= 设置日志默认的生存时间, 单位为秒,
0代表无限, 默认情况下为无限.

可用环境变量 =LOGGER_LOGS_LIMIT= 设置记录器的默认日志数量限制, 单位为个,
0代表无限, 默认情况下为无限.

***** 单独设置清除策略
单独设置的清除策略会覆盖由环境变量设置的同类策略.

****** 获取所有具有清除策略的记录器namespace
=GET /admin/logger-with-purge-policies=

获取所有具有清除策略的记录器namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger-with-purge-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/logger-with-purge-policies', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取清除策略
=GET /admin/logger/<namespace>/purge-policies=

返回JSON:
#+BEGIN_SRC ts
{
  timeToLive: number | null
  limit: number | null
}
#+END_SRC

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/purge-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/purge-policies`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置清除策略
=PUT /admin/logger/<namespace>/purge-policies/time-to-live=
=PUT /admin/logger/<namespace>/purge-policies/limit=

Payload必须是一个非负整数

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --data "$LIMIT" \
  "http://localhost:8080/admin/logger/$namespace/limit"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/limit`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
, body: JSON.stringify(limit)
})
#+END_SRC

****** 移除清除策略
=DELETE /admin/logger/<namespace>/purge-policies/time-to-live=
=DELETE /admin/logger/<namespace>/purge-policies/limit=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/purge-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/purge-policies`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 手动触发清除策略
=POST /admin/logger/<namespace>/purge-policies=

你总是可以在设置完清除策略后手动触发它们.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request POST \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/purge-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/purge-policies`, {
  method: 'POST'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

**** 访问控制
Logger提供两种访问控制策略, 可以一并使用.

所有访问控制API都使用基于口令的Bearer Token Authentication.
口令需通过环境变量 =LOGGER_ADMIN_PASSWORD= 进行设置.

访问控制规则是通过[[https://www.sqlite.org/wal.html][WAL模式]]j的SQLite3持久化的, 开启访问控制后,
服务器的吞吐量和响应速度会受到硬盘性能的影响.

已经打开的连接不会受到新的访问控制规则的影响.

***** 基于名单的访问控制
通过设置环境变量 =LOGGER_LIST_BASED_ACCESS_CONTROL= 开启基于名单的访问控制:
- =whitelist=
  启用基于记录器白名单的访问控制, 只有在名单内的记录器允许被访问.
- =blacklist=
  启用基于记录器黑名单的访问控制, 只有在名单外的记录器允许被访问.

****** 黑名单
******* 获取黑名单
=GET /admin/blacklist=

获取位于黑名单中的所有记录器namespace, 返回JSON表示的字符串数组 =string[]=.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/blacklist"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/blacklist', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

******* 添加黑名单
=PUT /admin/blacklist/<namespace>=

将特定记录器加入黑名单.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/blacklist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/blacklist/${namespace}`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

******* 移除黑名单
=DELETE /admin/blacklist/<namespace>=

将特定记录器从黑名单中移除.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/blacklist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/blacklist/${namespace}`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 白名单
******* 获取白名单
=GET /admin/whitelist=

获取位于黑名单中的所有记录器namespace, 返回JSON表示的字符串数组 =string[]=.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIM_PASSWORD" \
  "http://localhost:8080/admin/whitelist"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/whitelist', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

******* 添加白名单
=PUT /admin/whitelist/<namespace>=

将特定记录器加入白名单.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/whitelist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/whitelist/${namespace}`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

******* 移除白名单
=DELETE /admin/whitelist/<namespace>=

将特定记录器从白名单中移除.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/whitelist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/whitelist/${namespace}`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

***** 基于token的访问控制
对token的要求: =^[a-zA-Z0-9\.\-_]{1,256}$=

通过设置环境变量 =LOGGER_TOKEN_BASED_ACCESS_CONTROL=true= 开启基于token的访问控制.

基于token的访问控制将根据消息队列的token access policy决定其访问规则.
可通过环境变量 =LOGGER_WRITE_TOKEN_REQUIRED=, =LOGGER_READ_TOKEN_REQUIRED=,
=LOGGER_DELETE_TOKEN_REQUIRED= 设置相关默认值, 未设置情况下为 =false=.

一个消息队列可以有多个token, 每个token可以单独设置write和read权限, 不同消息队列的token不共用.

基于token的访问控制作出了以下假设
- token的传输过程是安全的
- token难以被猜测
- token的意外泄露可以被迅速处理

****** 获取所有具有token策略的记录器namespace
=GET /admin/logger-with-token-policies=

获取所有具有token策略的记录器namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger-with-token-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/logger-with-token-policies')
#+END_SRC

****** 获取特定记录器的token策略
=GET /admin/logger/<namespace>/token-policies=

返回JSON:
#+BEGIN_SRC ts
{
  writeTokenRequired: boolean | null
  readTokenRequired: boolean | null
  deleteTokenRequired: boolean | null
}
#+END_SRC
=null= 代表沿用相关默认值.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/token-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fethc(`http://localhost:8080/admin/logger/${namespace}/token-policies`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置token策略
=PUT /admin/logger/<namespace>/token-policies/write-token-required=
=PUT /admin/logger/<namespace>/token-policies/read-token-required=
=PUT /admin/logger/<namespace>/token-policies/delete-token-required=

Payload必须是一个布尔值.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$WRITE_TOKEN_REQUIRED" \
  "http://localhost:8080/admin/logger/$namespace/token-policies/write-token-required"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/token-policies/write-token-required`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  , 'Content-Type': 'application/json'
  }
, body: JSON.stringify(writeTokenRequired)
})
#+END_SRC

****** 移除token策略
=DELETE /admin/logger/<namespace>/token-policies/write-token-required=
=DELETE /admin/logger/<namespace>/token-policies/read-token-required=
=DELETE /admin/logger/<namespace>/token-policies/delete-token-required=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/token-policies/write-token-required"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/token-policies/write-token-required`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 获取所有具有token的记录器namespace
=GET /admin/logger-with-tokens=

获取所有具有token的记录器namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger-with-tokens"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger-with-tokens`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取特定记录器的所有token信息
=GET /admin/logger/<namespace>/tokens=

获取特定记录器的所有token信息, 返回JSON表示的token信息数组
=Array<{ token: string, write: boolean, read: boolean, delete: boolean }>=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/tokens"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/tokens`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 为特定记录器的token设置write权限
=PUT /admin/logger/<namespace>/tokens/<token>/write=

添加/更新token, 为token设置write权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/tokens/$token/log"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/tokens/${token}/log`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定记录器的token的write权限
=DELETE /admin/logger/<namespace>/tokens/<token>/write=

取消token的read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/tokens/$token/write"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/tokens/${token}/write`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 为特定记录器的token设置read权限
=PUT /admin/logger/<namespace>/tokens/<token>/read=

添加/更新token, 为token设置read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/tokens/$token/read"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/tokens/${token}/read`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定记录器的token的read权限
=DELETE /admin/logger/<namespace>/tokens/<token>/read=

取消token的read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/tokens/$token/read"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/tokens/${token}/read`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 为特定记录器的token设置delete权限
=PUT /admin/logger/<namespace>/tokens/<token>/delete=

添加/更新token, 为token设置delete权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/tokens/$token/delete"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/tokens/${token}/delete`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定记录器的token的delete权限
=DELETE /admin/logger/<namespace>/tokens/<token>/delete=

取消token的delete权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/tokens/$token/delete"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/tokens/${token}/delete`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

** HTTP/2
Logger支持HTTP/2, 以多路复用反向代理时的连接, 可通过设置环境变量 =LOGGER_HTTP2=true= 开启.

此HTTP/2支持不提供从HTTP/1.1自动升级的功能, 亦不提供HTTPS.
因此, 在本地curl里进行测试时, 需要开启 =--http2-prior-knowledge= 选项.

** 限制Payload大小
设置环境变量 =LOGGER_PAYLOAD_LIMIT= 可限制服务接受的单个请求的Payload字节数, 默认值为1048576(1MB).

设置环境变量 =LOGGER_WRITE_PAYLOAD_LIMIT= 可限制write接受的单个请求的Payload字节数,
默认值继承自 =LOGGER_PAYLOAD_LIMIT=.
