* Logger
一个受[[https://github.com/BlackGlory/pubsub][PubSub]]启发的Web友好的自托管ad-hoc微服务,
提供基于 HTTP 和 SSE 的日志功能.

日志的写入性能受到所使用的数据库的限制.

所有URL都采用了反射性的CORS, 不提供针对 =Origin= 的访问控制策略.

** Quickstart
- sse-cat: https://github.com/BlackGlory/sse-cat
- websocat: https://github.com/vi/websocat

#+BEGIN_SRC sh
# 运行
docker run --detach --publish 8080:8080 blackglory/logger

# 打开第一个终端
sse-cat http://localhost:8080/logger/hello-world

# 打开第二个终端
websocat ws://localhost:8080/logger/hello-world

# 打开第三个终端
curl http://localhost:8080/logger/hello-world --data 'hello'
#+END_SRC

** Install
*** 从源代码运行
可以使用环境变量 =LOGGER_HOST= 和 =LOGGER_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/logger
cd log
yarn install
yarn build
yarn bundle
yarn --silent start
#+END_SRC

*** Docker
#+BEGIN_SRC sh
docker run \
  --detach \
  --publish 8080:8080 \
  blackglory/logger
#+END_SRC

**** 从源代码构建
#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/logger
cd logger
yarn install
yarn docker:build
#+END_SRC

**** Recipes
***** 公开服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  logger:
    image: 'blackglory/logger'
    restart: always
    volumes:
      - 'logger-data:/data'
    ports:
      - '8080:8080'

volumes:
  logger-data:
#+END_SRC

***** 私人服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  logger:
    image: 'blackglory/logger'
    restart: always
    environment:
      - LOGGER_ADMIN_PASSWORD=password
      - LOGGER_TOKEN_BASED_ACCESS_CONTROL=true
      - LOGGER_WRITE_TOKEN_REQUIRED=true
      - LOGGER_READ_TOKEN_REQUIRED=true
      - LOGGER_DELETE_TOKEN_REQUIRED=true
    volumes:
      - 'logger-data:/data'
    ports:
      - '8080:8080'

volumes:
  logger-data:
#+END_SRC

** API
所有API中的记录器namespace都需要满足此正则表达式: =^[a-zA-Z0-9\.\-_]{0,255}$=

API中的日志id格式为 =Unix毫秒时间戳-从0开始的计数器=,
使用计数器是为了防止在同一毫秒添加多条日志出现重复.
由于日志有可能被删除, 因此不应假设计数器的数字是连续的.

*** Public
**** write
=POST /logger/<namespace>=

往特定记录器记录日志, 所有订阅此记录器的客户端都会收到日志.
namespace用于标识记录器.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有write权限的token:
=POST /logger/<namespace>?token=<token>=

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --data 'message' \
  "http://localhost:8080/logger/$namespace"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/logger/${namespace}`, {
  method: 'POST'
, body: 'message'
})
#+END_SRC

**** follow via Server-Sent Events(SSE)
=GET /logger/<namespace>=
=GET /logger/<namespace>?since=<logId>=

从特定记录器跟随日志.
namespace用于标识记录器.
可用 =since=<logId>= 一并接收特定日志(logId)之后的日志,
若在接收完日志前就有新的日志被写入, 则可能在接收的途中收到新日志.

接收到的日志格式如下:
#+BEGIN_SRC ts
{
  id: string
  payload: string
}
#+END_SRC

SSE的 =Last-Event-Id= 请求头(值等同于logId)可用于断开后的重新连接(在浏览器里会自动重连),
Logger将发送自Last-Event-Id之后的所有日志.
需要注意的是, 如果Logger从未发回过日志, 则客户端将无法获得Last-Event-Id, 因此会错过重新连接之前的日志.
如果同时存在 =since= 和 =Last-Event-Id=, 会优先使用 =Last-Event-Id=.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有read权限的token:
=/logger/<namespace>?token=<token>=

***** heartbeat
通过环境变量 =LOGGER_SSE_HEARTBEAT_INTERVAL= 可以设置SSE心跳包的发送间隔, 单位为毫秒.
在默认情况下, 服务不会发送SSE心跳包,
半开连接的检测依赖于服务端和客户端的运行平台的TCP Keepalive配置.

当 =LOGGER_SSE_HEARTBEAT_INTERVAL= 大于零时,
服务会通过SSE的heartbeat事件按指定间隔发送空白数据.
客户端若要实现半开连接检测, 则需要自行根据heartbeat事件设定计时器, 以判断连接是否正常.

***** Example
****** sse-cat
#+BEGIN_SRC sh
sse-cat "http://localhost:8080/logger/$namespace"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
const es = new EventSource(`http://localhost:8080/logger/${namespace}`)
es.addEventListener('message', event => {
  console.log(event.data)
})
#+END_SRC

**** follow via WebSocket
=WS /logger/<namespace>=
=WS /logger/<namespace>?since=<logId>=

从特定记录器跟随日志.
namespace用于标识记录器.
可用 =since=<logId>= 一并接收特定日志(logId)之后的日志,
若在接收完日志前就有新的日志被写入, 则可能在接收的途中收到新日志.

接收到的日志格式如下:
#+BEGIN_SRC ts
{
  id: string
  payload: string
}
#+END_SRC

如果开启基于token的访问控制, 则可能需要在Querystring提供具有read权限的token:
=/logger/<namespace>?token=<token>=

***** heartbeat
通过环境变量  =LOGGER_WS_HEARTBEAT_INTERVAL= 可以设置WS心跳包(ping帧)的发送间隔, 单位为毫秒.
在默认情况下, 服务不会发送心跳包,
半开连接的检测依赖于服务端和客户端的运行平台的TCP Keepalive配置.

当 =LOGGER_WS_HEARTBEAT_INTERVAL= 大于零时,
服务会通过WS的ping帧按间隔发送心跳包.

客户端若要实现半开连接检测, 可以定期发送空白字符串到服务端, 以判断连接是否正常.
为防止带宽滥用, 如果客户端发送的不是空白字符串, 则服务端会主动关闭连接.

***** Example
****** websocat
#+BEGIN_SRC sh
websocat "ws://localhost:8080/logger/$namespace"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
const ws = new WebSocket(`ws://localhost:8080/logger/${namespace}`)
ws.addEventListener('message', event => {
    console.log(event.data);
})
#+END_SRC

**** query
=GET /logger/<namespace>/logs=
获取所有日志.

参数(head, tail, from, to可以组合使用, 不能同时有head和tail)
- =GET /logger/<namespace>/logs?head=<number>= 取开头number个记录.
- =GET /logger/<namespace>/logs?tail=<number>= 取结尾number个记录.
- =GET /logger/<namespace>/logs?from=<logId>= 从特定logId开始.
- =GET /logger/<namespace>/logs?to=<logId>= 至特定logId结束.

from和to操作符可以使用实际并不存在的logId, 程序会自动匹配至最近的记录.
省略from相当于从最早的记录开始.
省略to相当于至最晚的记录结束.

返回结果为JSON数组:
#+BEGIN_SRC ts
Array<{
  id: string
  payload: string
}>
#+END_SRC

如果开启基于token的访问控制, 则可能需要在Querystring提供具有read权限的token:
=/logger/<namespace>/logs?token=<token>=

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/logger/$namespace/logs"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/logger/${namespace}/logs`).then(res => res.json())
#+END_SRC

**** delete
=DELETE /logger/<namspace>/logs=
删除所有日志.

参数(head, tail, from, to可以组合使用, 不能同时有head和tail)
- =DELETE /logger/<namespace>/logs?from=<logId>= 删除从特定logId开始.
- =DELETE /logger/<namespace>/logs?to=<logId>= 删除至特定logId结束.
- =DELETE /logger/<namespace>/logs?head=<number>= 删除开头number个记录.
- =DELETE /logger/<namespace>/logs?tail=<number>= 删除结尾number个记录.

如果开启基于token的访问控制, 则可能需要在Querystring提供具有delete权限的token:
=/logger/<namespace>/logs?token=<token>=

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/logger/$namespace/logs"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/logger/${namespace}/logs`, {
  method: 'DELETE'
})
#+END_SRC

**** get all namespaces
=GET /logger=

列出所有的namespace.
输出JSON =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

*****  Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/logger'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/logger').then(res => res.json())
#+END_SRC

*** Private
**** 日志清除策略(purge policies)
Logger同时实施两种日志清除策略:
- 基于生存时间(TTL, time-to-live)的清除策略, 如果日志过期, 则删除日志
- 基于数量限制(limit)的清除策略, 如果单个记录器的日志数量达到上限, 则删除旧日志

日志清除策略只会在写入新日志时得到执行,
因此当你查询日志时, 可能会得到已经过期的日志.

可用环境变量 =LOGGER_LOGS_TIME_TO_LIVE= 设置日志默认的生存时间, 单位为秒,
0代表无限, 默认情况下为无限.

可用环境变量 =LOGGER_LOGS_LIMIT= 设置记录器的默认日志数量限制, 单位为个,
0代表无限, 默认情况下为无限.

***** 单独设置清除策略
单独设置的清除策略会覆盖由环境变量设置的同类策略.

****** 获取所有具有清除策略的记录器namespace
=GET /admin/logger-with-purge-policies=

获取所有具有清除策略的记录器namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger-with-purge-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/logger-with-purge-policies', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取清除策略
=GET /admin/logger/<namespace>/purge-policies=

返回JSON:
#+BEGIN_SRC ts
{
  timeToLive: number | null
  limit: number | null
}
#+END_SRC

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/purge-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/purge-policies`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置清除策略
=PUT /admin/logger/<namespace>/purge-policies/time-to-live=
=PUT /admin/logger/<namespace>/purge-policies/limit=

Payload必须是一个非负整数

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --data "$LIMIT" \
  "http://localhost:8080/admin/logger/$namespace/limit"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/limit`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
, body: JSON.stringify(limit)
})
#+END_SRC

****** 移除清除策略
=DELETE /admin/logger/<namespace>/purge-policies/time-to-live=
=DELETE /admin/logger/<namespace>/purge-policies/limit=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/purge-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/purge-policies`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 手动触发清除策略
=POST /admin/logger/<namespace>/purge-policies=

你总是可以在设置完清除策略后手动触发它们.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request POST \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/logger/$namespace/purge-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/logger/${namespace}/purge-policies`, {
  method: 'POST'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

** 限制Payload大小
设置环境变量 =LOGGER_PAYLOAD_LIMIT= 可限制服务接受的单个请求的Payload字节数, 默认值为1048576(1MB).

设置环境变量 =LOGGER_WRITE_PAYLOAD_LIMIT= 可限制write接受的单个请求的Payload字节数,
默认值继承自 =LOGGER_PAYLOAD_LIMIT=.
